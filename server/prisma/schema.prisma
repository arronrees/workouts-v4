// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @unique @default(uuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  email                    String                    @unique
  password                 String
  isVerified               Boolean                   @default(false)
  username                 String                    @unique
  refreshTokenVersion      Int                       @default(1)
  workouts                 Workout[]
  workoutInstances         WorkoutInstance[]
  workoutExercises         WorkoutExercise[]
  workoutExerciseInstances WorkoutExerciseInstance[]
  workoutSets              WorkoutSet[]
  workoutSetInstances      WorkoutSetInstance[]
}

enum ExerciseMeasurement {
  time
  reps_only
  distance
  time_or_distance
  weight
}

model Exercise {
  id                       String                    @id @unique @default(uuid())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  name                     String
  measurement              ExerciseMeasurement       @default(weight)
  equipmentNeeded          String
  muscles                  MusclesOnExercises[]
  workoutExercises         WorkoutExercise[]
  workoutExerciseInstances WorkoutExerciseInstance[]
}

model Muscle {
  id        String               @id @unique @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  name      String               @unique
  exercises MusclesOnExercises[]
}

model MusclesOnExercises {
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  muscle     Muscle   @relation(fields: [muscleId], references: [id])
  muscleId   String

  @@id([exerciseId, muscleId])
}

model Workout {
  id        String            @id @unique @default(uuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  exercises WorkoutExercise[]
  instances WorkoutInstance[]
}

model WorkoutExercise {
  id                String                    @id @unique @default(uuid())
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  exercise          Exercise                  @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  sets              WorkoutSet[]
  workout           Workout?                  @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutId         String
  sortOrder         Int
  notes             String?
  exerciseInstances WorkoutExerciseInstance[]
  user              User                      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
}

model WorkoutSet {
  id                String           @id @unique @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  reps              Int?
  weight            Float?
  time              Float?
  distance          Float?
  workoutExercise   WorkoutExercise? @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutExerciseId String?
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
}

//
//
// instances
model WorkoutInstance {
  id        String                    @id @unique @default(uuid())
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt
  user      User                      @relation(fields: [userId], references: [id])
  userId    String
  exercises WorkoutExerciseInstance[]
  workout   Workout?                  @relation(fields: [workoutId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  workoutId String?
}

model WorkoutExerciseInstance {
  id                String               @id @unique @default(uuid())
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  exercise          Exercise             @relation(fields: [exerciseId], references: [id])
  exerciseId        String
  sets              WorkoutSetInstance[]
  workout           WorkoutInstance?     @relation(fields: [workoutId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutId         String
  sortOrder         Int
  notes             String?
  wasSkipped        Boolean              @default(false)
  workoutExercise   WorkoutExercise      @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId String
  user              User                 @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
}

model WorkoutSetInstance {
  id                String                   @id @unique @default(uuid())
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @updatedAt
  reps              Int?
  weight            Float?
  time              Float?
  distance          Float?
  workoutExercise   WorkoutExerciseInstance? @relation(fields: [workoutExerciseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workoutExerciseId String?
  wasSkipped        Boolean                  @default(false)
  user              User                     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            String
}

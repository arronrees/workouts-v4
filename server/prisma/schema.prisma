// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @unique @default(uuid())
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  email               String    @unique
  password            String
  isVerified          Boolean   @default(false)
  username            String    @unique
  refreshTokenVersion Int       @default(1)
  workouts            Workout[]
}

enum ExerciseMeasurement {
  time
  reps
  weight
}

model Exercise {
  id              String               @id @unique @default(uuid())
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  name            String
  measurement     ExerciseMeasurement  @default(weight)
  equipmentNeeded String
  muscles         MusclesOnExercises[]
  workoutExercise WorkoutExercise[]
}

model Muscle {
  id        String               @id @unique @default(uuid())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  name      String
  exercises MusclesOnExercises[]
}

model MusclesOnExercises {
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  muscle     Muscle   @relation(fields: [muscleId], references: [id])
  muscleId   String

  @@id([exerciseId, muscleId])
}

model Workout {
  id        String            @id @unique @default(uuid())
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  name      String
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  exercises WorkoutExercise[]
}

model WorkoutExercise {
  id         String       @id @unique @default(uuid())
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  exercise   Exercise     @relation(fields: [exerciseId], references: [id])
  exerciseId String
  sets       WorkoutSet[]
  workout    Workout?     @relation(fields: [workoutId], references: [id])
  workoutId  String?
  sortOrder  Int
}

model WorkoutSet {
  id                String           @id @unique @default(uuid())
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  reps              Int?
  weight            Float?
  time              Float?
  workoutExercise   WorkoutExercise? @relation(fields: [workoutExerciseId], references: [id])
  workoutExerciseId String?
}
